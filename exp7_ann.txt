import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras

#

# importing dataset
digit_mnist = keras.datasets.mnist
(x_train_full, y_train_full), (x_test, y_test) = digit_mnist.load_data()

#

x_train_full.shape

#

plt.imshow(x_train_full[1])

#

x_train_n=x_train_full/255
x_test_n=x_test/255

#

x_valid,x_train=x_train_n[:6000],x_train_n[6000:]
y_valid,y_train=y_train_full[:6000],y_train_full[6000:]
x_test=x_test_n

#

np.random.seed(42)
tf.random.set_seed(42)

#

# Model Building
model = keras.models.Sequential()
model.add(keras.layers.Flatten(input_shape=[28,28]))
model.add(keras.layers.Dense(200,activation='relu'))
model.add(keras.layers.Dense(100,activation='relu'))
model.add(keras.layers.Dense(10,activation='softmax'))

#

model.compile(loss='sparse_categorical_crossentropy',
             metrics=['accuracy'],
             optimizer = 'sgd')

#

model_r = model.fit(x_train,y_train,epochs=60,
                         validation_data=(x_valid,y_valid))

#

model.evaluate(x_test,y_test)

#

# Val-loss
pd.DataFrame(model_r.history).plot(figsize=(8,5))
plt.grid(True)
plt.gca().set_ylim(0,1)
plt.show()

#

x_new=x_test[:5]
y_prob = model.predict(x_new)
y_prob.round(2)

#

predict_x = model.predict(x_new)
classes_x=np.argmax(predict_x,axis=1)

#

classes_x



